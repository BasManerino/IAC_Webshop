package model;

import java.util.*;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import org.springframework.data.rest.core.annotation.RestResource;

@Entity
@Table(name = "account") // Deze klasse wordt als entity account in database gemaakt
public class Account {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id; // Autogenerated attribute id
	private Date created_on;
	private String name;
	private String phone;
	private String email;

	@ManyToOne
	@JoinColumn(name = "address_id")
	@RestResource(path = "accountAddress", rel = "address")
	private Address address; // Many-to-one relatie met address, address_id is de FK

	@ManyToOne
	@JoinColumn(name = "role_id")
	@RestResource(path = "accountRole", rel = "role")
	private Role role; // Many-to-one relatie met role, role_id is de FK

	@OneToMany(mappedBy = "account")
	private List<Order> orders; // One_to_many relatie met order, account_id is de FK in order

	@OneToOne
	@JoinColumn(name = "cart_id")
	@RestResource(path = "accountCart", rel = "cart")
	private Cart cart; // One-to-one relatie met cart, cart_id is de FK

	public Account(Date createdOn, String name, String phone, String email) {
		this.created_on = createdOn;
		this.name = name;
		this.phone = phone;
		this.email = email;
	}

	//Deze constructor is verplicht om informatie uit te database te halen
	public Account() {
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public Date getCreated_on() {
		return created_on;
	}

	public void setCreated_on(Date created_on) {
		this.created_on = created_on;
	}

	//Er wordt give i.p.v get gebruikt om geen data van address direct te weergeven
	public Address giveAddress() {
		return address;
	}

	public void setAddress(Address address) {
		this.address = address;
	}

	//Er wordt give i.p.v get gebruikt om geen data van role direct te weergeven
	public Role giveRole() {
		return role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	//Er wordt give i.p.v get gebruikt om geen data van orders direct te weergeven
	public List<Order> giveOrders() {
		return orders;
	}

	public void setOrders(List<Order> orders) {
		this.orders = orders;
	}

	//Er wordt give i.p.v get gebruikt om geen data van cart direct te weergeven
	public Cart giveCart() {
		return cart;
	}

	public void setCart(Cart cart) {
		this.cart = cart;
	}

}